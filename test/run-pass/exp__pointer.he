fn primitives__init
{
    /** single indirect */

    let a = 10;
    let b = &a;
    let c = *b;

    assert! (&a <> &c);
    assert! (a == c && a == 10);

    /** multi indirect */

    let d = 11;
    let e = &d;
    let f = &e;
    let g = **f;

    assert! (d == g && g == 11);
}

fn primitives__assingment
{
    /** single indirect */

    let a = 10;
    let b = &a;
    let c: int;
    c = *b;

    assert! (&a <> &c);
    assert! (a == c && a == 10);

    /** multi indirect */

    let d = 11;
    let e = &d;
    let f = &e;
    let g: int;
    g = **f;

    assert! (d == g && g == 11);
}

def Point = { x: int, y: int }

fn records__init
{
    let d = Point{x = 13, y = 15};
    let e = &d;
    let f = *e; // copy

    assert! (&d <> &f);
    assert! (d.x == f.x);
    assert! (d.y == f.y);
}

fn records__assignment
{
    let g = Point{x = 16, y = 17};
    let h = &g;
    let i: Point;
    i = *h; // copy

    assert! (&g <> &i);
    assert! (g.x == i.x);
    assert! (g.y == i.y);
}

fn records__fields
{
    /** single indirect */

    let a = Point{ x = 11, y = 12 };
    let b = &a;
    let c = b:x;

    assert! (&a == b);
    assert! (b:x == a.x);
    assert! (b:y == a.y);

    /** multi inderect */

    let j = Point{x = 18, y = 19};
    let k = &j;
    let l = &k;
    let m = &l;

    assert! (&j == **m);
    assert! (m:::x == j.x);
    assert! (m:::y == j.y);
}

fn arrays__init
{
    let d = [1,2,3];
    let e = &d;
    let f = *e; // copy

    assert! (&d <> &f);
    assert! (d[0] == f[0]);
    assert! (d[1] == f[1]);
    assert! (d[2] == f[2]);
}

fn arrays__assignment
{
    let d = [1,2,3];
    let e = &d;
    let f: [int;3];
    f = *e; // copy

    assert! (&d <> &f);
    assert! (d[0] == f[0]);
    assert! (d[1] == f[1]);
    assert! (d[2] == f[2]);
}

fn pointers_math
{
    let a = [Point{x = 10, y = 11}, Point{x = 12, y = 13}];
    let b = a as &int;

    assert! (&a == b);
    assert! (*b == a[0].x);

    b = b + 1;
    assert! (*b == a[0].y);

    b = b + 1;
    assert! (*b == a[1].x);

    b = b + 1;
    assert! (*b == a[1].y);

    b = b - 1;
    assert! (*b == a[1].x);

    b = b - 1;
    assert! (*b == a[0].y);

    b = b - 1;
    assert! (*b == a[0].x);
}

fn main
{
    primitives__assingment();
    records__init();
    records__assignment();
    records__fields();
    arrays__init();
    pointers_math();

    ret 0;
}
